// Code generated by MockGen. DO NOT EDIT.
// Source: ../contract/transport-service-contract.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransportServiceContract is a mock of TransportServiceContract interface
type MockTransportServiceContract struct {
	ctrl     *gomock.Controller
	recorder *MockTransportServiceContractMockRecorder
}

// MockTransportServiceContractMockRecorder is the mock recorder for MockTransportServiceContract
type MockTransportServiceContractMockRecorder struct {
	mock *MockTransportServiceContract
}

// NewMockTransportServiceContract creates a new mock instance
func NewMockTransportServiceContract(ctrl *gomock.Controller) *MockTransportServiceContract {
	mock := &MockTransportServiceContract{ctrl: ctrl}
	mock.recorder = &MockTransportServiceContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransportServiceContract) EXPECT() *MockTransportServiceContractMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockTransportServiceContract) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockTransportServiceContractMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransportServiceContract)(nil).Start))
}

// Stop mocks base method
func (m *MockTransportServiceContract) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockTransportServiceContractMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransportServiceContract)(nil).Stop))
}
