// Code generated by MockGen. DO NOT EDIT.
// Source: services/business/contract.go

// Package mock_business is a generated GoMock package.
package mock_business

import (
	context "context"
	reflect "reflect"

	business "github.com/decentralized-cloud/project/services/business"
	gomock "github.com/golang/mock/gomock"
)

// MockBusinessContract is a mock of BusinessContract interface.
type MockBusinessContract struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessContractMockRecorder
}

// MockBusinessContractMockRecorder is the mock recorder for MockBusinessContract.
type MockBusinessContractMockRecorder struct {
	mock *MockBusinessContract
}

// NewMockBusinessContract creates a new mock instance.
func NewMockBusinessContract(ctrl *gomock.Controller) *MockBusinessContract {
	mock := &MockBusinessContract{ctrl: ctrl}
	mock.recorder = &MockBusinessContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessContract) EXPECT() *MockBusinessContractMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockBusinessContract) CreateProject(ctx context.Context, request *business.CreateProjectRequest) (*business.CreateProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, request)
	ret0, _ := ret[0].(*business.CreateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockBusinessContractMockRecorder) CreateProject(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockBusinessContract)(nil).CreateProject), ctx, request)
}

// DeleteProject mocks base method.
func (m *MockBusinessContract) DeleteProject(ctx context.Context, request *business.DeleteProjectRequest) (*business.DeleteProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, request)
	ret0, _ := ret[0].(*business.DeleteProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockBusinessContractMockRecorder) DeleteProject(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockBusinessContract)(nil).DeleteProject), ctx, request)
}

// ListProjects mocks base method.
func (m *MockBusinessContract) ListProjects(ctx context.Context, request *business.ListProjectsRequest) (*business.ListProjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx, request)
	ret0, _ := ret[0].(*business.ListProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockBusinessContractMockRecorder) ListProjects(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockBusinessContract)(nil).ListProjects), ctx, request)
}

// ReadProject mocks base method.
func (m *MockBusinessContract) ReadProject(ctx context.Context, request *business.ReadProjectRequest) (*business.ReadProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProject", ctx, request)
	ret0, _ := ret[0].(*business.ReadProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProject indicates an expected call of ReadProject.
func (mr *MockBusinessContractMockRecorder) ReadProject(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProject", reflect.TypeOf((*MockBusinessContract)(nil).ReadProject), ctx, request)
}

// UpdateProject mocks base method.
func (m *MockBusinessContract) UpdateProject(ctx context.Context, request *business.UpdateProjectRequest) (*business.UpdateProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, request)
	ret0, _ := ret[0].(*business.UpdateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockBusinessContractMockRecorder) UpdateProject(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockBusinessContract)(nil).UpdateProject), ctx, request)
}
