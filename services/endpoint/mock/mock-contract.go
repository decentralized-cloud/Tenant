// Code generated by MockGen. DO NOT EDIT.
// Source: services/endpoint/contract.go

// Package mock_endpoint is a generated GoMock package.
package mock_endpoint

import (
	reflect "reflect"

	endpoint "github.com/go-kit/kit/endpoint"
	gomock "github.com/golang/mock/gomock"
)

// MockEndpointCreatorContract is a mock of EndpointCreatorContract interface.
type MockEndpointCreatorContract struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointCreatorContractMockRecorder
}

// MockEndpointCreatorContractMockRecorder is the mock recorder for MockEndpointCreatorContract.
type MockEndpointCreatorContractMockRecorder struct {
	mock *MockEndpointCreatorContract
}

// NewMockEndpointCreatorContract creates a new mock instance.
func NewMockEndpointCreatorContract(ctrl *gomock.Controller) *MockEndpointCreatorContract {
	mock := &MockEndpointCreatorContract{ctrl: ctrl}
	mock.recorder = &MockEndpointCreatorContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointCreatorContract) EXPECT() *MockEndpointCreatorContractMockRecorder {
	return m.recorder
}

// CreateProjectEndpoint mocks base method.
func (m *MockEndpointCreatorContract) CreateProjectEndpoint() endpoint.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectEndpoint")
	ret0, _ := ret[0].(endpoint.Endpoint)
	return ret0
}

// CreateProjectEndpoint indicates an expected call of CreateProjectEndpoint.
func (mr *MockEndpointCreatorContractMockRecorder) CreateProjectEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectEndpoint", reflect.TypeOf((*MockEndpointCreatorContract)(nil).CreateProjectEndpoint))
}

// DeleteProjectEndpoint mocks base method.
func (m *MockEndpointCreatorContract) DeleteProjectEndpoint() endpoint.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectEndpoint")
	ret0, _ := ret[0].(endpoint.Endpoint)
	return ret0
}

// DeleteProjectEndpoint indicates an expected call of DeleteProjectEndpoint.
func (mr *MockEndpointCreatorContractMockRecorder) DeleteProjectEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectEndpoint", reflect.TypeOf((*MockEndpointCreatorContract)(nil).DeleteProjectEndpoint))
}

// ListProjectsEndpoint mocks base method.
func (m *MockEndpointCreatorContract) ListProjectsEndpoint() endpoint.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsEndpoint")
	ret0, _ := ret[0].(endpoint.Endpoint)
	return ret0
}

// ListProjectsEndpoint indicates an expected call of ListProjectsEndpoint.
func (mr *MockEndpointCreatorContractMockRecorder) ListProjectsEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsEndpoint", reflect.TypeOf((*MockEndpointCreatorContract)(nil).ListProjectsEndpoint))
}

// ReadProjectEndpoint mocks base method.
func (m *MockEndpointCreatorContract) ReadProjectEndpoint() endpoint.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProjectEndpoint")
	ret0, _ := ret[0].(endpoint.Endpoint)
	return ret0
}

// ReadProjectEndpoint indicates an expected call of ReadProjectEndpoint.
func (mr *MockEndpointCreatorContractMockRecorder) ReadProjectEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProjectEndpoint", reflect.TypeOf((*MockEndpointCreatorContract)(nil).ReadProjectEndpoint))
}

// UpdateProjectEndpoint mocks base method.
func (m *MockEndpointCreatorContract) UpdateProjectEndpoint() endpoint.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectEndpoint")
	ret0, _ := ret[0].(endpoint.Endpoint)
	return ret0
}

// UpdateProjectEndpoint indicates an expected call of UpdateProjectEndpoint.
func (mr *MockEndpointCreatorContractMockRecorder) UpdateProjectEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectEndpoint", reflect.TypeOf((*MockEndpointCreatorContract)(nil).UpdateProjectEndpoint))
}
