syntax = "proto3";

package tenant;

/**
 * The different error types
 */
enum Error {
  // Indicates the operation was successful
  NO_ERROR = 0;
  // Indicates the operation fail with unknown error
  UNKNOWN = 1;
  // Indicates the tenant already exists
  TENANT_ALREADY_EXISTS = 2;
  // Indicates the tenant does not exist
  TENANT_NOT_FOUND = 3;
  // Indicates the provided values for he operation were invalid
  BAD_REQUEST = 4;
}

/**
 * The tenant object
 */
message Tenant {
  // The tenant name
  string name = 1;
}

/**
 * Request to create a new tenant
 */
message CreateTenantRequest {
  // The tenant object
  Tenant tenant = 1;
}

/**
 * Response contains the result of creating a new tenant
 */
message CreateTenantResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The unique tenant identifier
  string tenantID = 3;

  // The created tenant object
  Tenant tenant = 4;
}

/** Request to read an existing tenant
 */
message ReadTenantRequest {
  // The unique tenant identifier
  string tenantID = 1;
}

/**
 * Response contains the result of reading an existing tenant
 */
message ReadTenantResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The tenant object
  Tenant tenant = 3;
}

/**
 * Request to update an existing tenant
 */
message UpdateTenantRequest {
  // The unique tenant identifier
  string tenantID = 1;

  // The tenant object contains the updated tenant details to update
  Tenant tenant = 2;
}

/**
 * Response contains the result of updating an existing tenant
 */
message UpdateTenantResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The updated tenant object
  Tenant tenant = 3;
}

/**
 * Request to delete an existing tenant
 */
message DeleteTenantRequest {
  // The unique tenant identifier
  string tenantID = 1;
}

/**
 * Response contains the result of deleting an existing tenant
 */
message DeleteTenantResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;
}

/**
 * The pagination information compatible with graphql-relay connection definition, for more information visit:
 * https://facebook.github.io/relay/graphql/connections.htm
 */
message Pagination {
  string after = 1;

  int32 first = 2;

  string before = 3;

  int32 last = 4;
}

/**
 * The different sorting direction
 */
enum SortingDirection {
  // Indicates result data must be sorted from low to high sequence
  ASCENDING = 0;

  // Indicates result data must be sorted from high to low sequence
  DESCENDING = 1;
}

/**
 * Defines the pair of values that are used to determine how the result data should be sorted.
 */
message SortingOptionPair {
  // The name of the field on
   string name = 1;

   // THe sorting direction
   SortingDirection direction = 2;
}

/**
 * Request to search for tenants
 */
message SearchRequest {
  // The pagination information
  Pagination pagination = 1;

  // The collection of sorting option determines how the returned data must be sorted
  repeated SortingOptionPair sortingOptions = 2;

  // The unique tenant identifiers
  repeated string tenantIDs = 3;
}

/*
 * The pair of tenant and a cursor that defines the logical position of the tenant in the repository
 * that can later referred to using pagination information.
 */
message TenantWithCursor {
  // The tenant object
  Tenant tenant = 1;

  // The unique tenant identifier
  string tenantID = 2;

  // The cursor defines the logical position of the tenant in the repository that can be later
  // referred to using pagination information
  string cursor = 3;
}

/**
 * Response contains the result of searching for tenants
 */
message SearchResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // Indicates whether more edges exist prior to the set defined by the clients arguments
  bool hasPreviousPage = 3;

  // Indicates whether more edges exist following the set defined by the clients arguments
  bool hasNextPage = 4;

  // The list contains the tenants that matched the search criteria
  repeated TenantWithCursor tenants = 5;

}

/**
 * The tenant servcie that can create new tenant, read, update and delete existing tenant
 */
service TenantService {
  // CreateTenant creates a new tenant
  // request: The request to create a new tenant
  // Returns the result of creating new tenant
  rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse);

  // ReadTenant read an exsiting tenant
  // request: The request to read an esiting tenant
  // Returns the result of reading an exiting tenant
  rpc ReadTenant(ReadTenantRequest) returns (ReadTenantResponse);

  // UpdateTenant update an exsiting tenant
  // request: The request to update an esiting tenant
  // Returns the result of updateing an exiting tenant
  rpc UpdateTenant(UpdateTenantRequest) returns (UpdateTenantResponse);

  // DeleteTenant delete an exsiting tenant
  // request: The request to delete an esiting tenant
  // Returns the result of deleting an exiting tenant
  rpc DeleteTenant(DeleteTenantRequest) returns (DeleteTenantResponse);

  // Search returns the list of tenants that matched the criteria
  // request: The request contains the search criteria
  // Returns the list of tenants that matched the criteria
  rpc Search(SearchRequest) returns (SearchResponse);
}

