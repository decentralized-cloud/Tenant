syntax = "proto3";

package project;

/**
 * The different error types
 */
enum Error {
  // Indicates the operation was successful
  NO_ERROR = 0;
  // Indicates the operation fail with unknown error
  UNKNOWN = 1;
  // Indicates the project already exists
  PROJECT_ALREADY_EXISTS = 2;
  // Indicates the project does not exist
  PROJECT_NOT_FOUND = 3;
  // Indicates the provided values for he operation were invalid
  BAD_REQUEST = 4;
}

/**
 * The project object
 */
message Project {
  // The project name
  string name = 1;
}

/**
 * Request to create a new project
 */
message CreateProjectRequest {
  // The project object
  Project project = 1;
}

/**
 * Response contains the result of creating a new project
 */
message CreateProjectResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The unique project identifier
  string projectID = 3;

  // The created project object
  Project project = 4;

  // The cursor defines the position of the project in the repository that can be later
  // referred to using pagination information
  string cursor = 5;
}

/** Request to read an existing project
 */
message ReadProjectRequest {
  // The unique project identifier
  string projectID = 1;
}

/**
 * Response contains the result of reading an existing project
 */
message ReadProjectResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The project object
  Project project = 3;
}

/**
 * Request to update an existing project
 */
message UpdateProjectRequest {
  // The unique project identifier
  string projectID = 1;

  // The project object contains the updated project details to update
  Project project = 2;
}

/**
 * Response contains the result of updating an existing project
 */
message UpdateProjectResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The updated project object
  Project project = 3;

  // The cursor defines the position of the project in the repository that can be later
  // referred to using pagination information
  string cursor = 4;
}

/**
 * Request to delete an existing project
 */
message DeleteProjectRequest {
  // The unique project identifier
  string projectID = 1;
}

/**
 * Response contains the result of deleting an existing project
 */
message DeleteProjectResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;
}

/**
 * The pagination information compatible with graphql-relay connection definition, for more information visit:
 * https://facebook.github.io/relay/graphql/connections.htm
 */
message Pagination {
    bool hasFirst = 1;

    int32 first = 2;

    bool hasAfter = 3;

    string after = 4;

    bool hasLast = 5;

    int32 last = 6;

    bool hasBefore = 7;

    string before = 8;
}

/**
 * The different sorting direction
 */
enum SortingDirection {
  // Indicates result data must be sorted from low to high sequence
  ASCENDING = 0;

  // Indicates result data must be sorted from high to low sequence
  DESCENDING = 1;
}

/**
 * Defines the pair of values that are used to determine how the result data should be sorted.
 */
message SortingOptionPair {
  // The name of the field on
   string name = 1;

   // THe sorting direction
   SortingDirection direction = 2;
}

/**
 * Request to search for projects
 */
message SearchRequest {
  // The pagination information
  Pagination pagination = 1;

  // The collection of sorting option determines how the returned data must be sorted
  repeated SortingOptionPair sortingOptions = 2;

  // The unique project identifiers
  repeated string projectIDs = 3;
}

/*
 * The pair of project and a cursor that defines the position of the project in the repository
 * that can later referred to using pagination information.
 */
message ProjectWithCursor {
  // The project object
  Project project = 1;

  // The unique project identifier
  string projectID = 2;

  // The cursor defines the position of the project in the repository that can be later
  // referred to using pagination information
  string cursor = 3;
}

/**
 * Response contains the result of searching for projects
 */
message SearchResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // Indicates whether more edges exist prior to the set defined by the clients arguments
  bool hasPreviousPage = 3;

  // Indicates whether more edges exist following the set defined by the clients arguments
  bool hasNextPage = 4;

  // Indicates the total count of the projects that matched the provided filter criteria
  int64 totalCount = 5;

  // The list contains the projects that matched the search criteria
  repeated ProjectWithCursor projects = 6;
}

/**
 * The project servcie that can create new project, read, update and delete existing project
 */
service ProjectService {
  // CreateProject creates a new project
  // request: The request to create a new project
  // Returns the result of creating new project
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse);

  // ReadProject read an exsiting project
  // request: The request to read an esiting project
  // Returns the result of reading an exiting project
  rpc ReadProject(ReadProjectRequest) returns (ReadProjectResponse);

  // UpdateProject update an exsiting project
  // request: The request to update an esiting project
  // Returns the result of updateing an exiting project
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse);

  // DeleteProject delete an exsiting project
  // request: The request to delete an esiting project
  // Returns the result of deleting an exiting project
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse);

  // Search returns the list of projects that matched the criteria
  // request: The request contains the search criteria
  // Returns the list of projects that matched the criteria
  rpc Search(SearchRequest) returns (SearchResponse);
}

